require('dotenv-flow').config();
import express, { Express, Request, Response, NextFunction } from 'express';
import mysql, { PoolOptions } from 'mysql2';

const fs                        /**/ = require('fs');
const cors                      /**/ = require('cors');

interface DrumbeatServerOptions {
    host:                       /**/ string,
    database:                   /**/ string,
    user:                       /**/ string,
    password?:                  /**/ string,
    ssl:                        /**/ boolean,
    waitForConnections:         /**/ boolean,
    connectionLimit:            /**/ number,
    queueLimit:                 /**/ number,
}

enum DrumbeatResponseStatus {
    Ok                          /**/ = 'ok',
}

enum DrumbeatMessageStatus {
    Pending                     /**/ = 'pending',
    Cancelled                   /**/ = 'cancelled',
    Completed                   /**/ = 'completed',
    Failed                      /**/ = 'failed',
}

namespace DrumbeatMessageStatus {
    const map: { [key in DrumbeatMessageStatus]: number } = {
        [DrumbeatMessageStatus.Pending]:        /**/ 1,
        [DrumbeatMessageStatus.Cancelled]:      /**/ 2,
        [DrumbeatMessageStatus.Completed]:      /**/ 3,
        [DrumbeatMessageStatus.Failed]:         /**/ 4,
    };

    export function serialize(status: DrumbeatMessageStatus): number {
        return map[status];
    }

    export function deserialize(status: number): DrumbeatMessageStatus {
        for (var key in map) {
            const castKey = key as DrumbeatMessageStatus;
            if (map[castKey] === status) return castKey;
        }
        throw 'Not found';
    }

}

interface DrumbeatMessage {
    id:                         /**/ number;
    status:                     /**/ DrumbeatMessageStatus;
    timeStart:                  /**/ Date;
    timeEnd?:                   /**/ Date;
    body:                       /**/ any;
}

class DrumbeatServer {

    #host                           /**/: string;
    #user                           /**/: string;
    #password?                      /**/: string;
    #database                       /**/: string;
    #ssl                            /**/: boolean;
    #waitForConnections             /**/: boolean;
    #connectionLimit                /**/: number;
    #queueLimit                     /**/: number;

    #dbPool                         /**/: any;

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    //
    //
    //
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor(opts: DrumbeatServerOptions) {
        this.#host                      /**/ = opts.host;
        this.#user                      /**/ = opts.user;
        this.#password                  /**/ = opts.password;
        this.#database                  /**/ = opts.database;
        this.#ssl                       /**/ = opts.ssl;
        this.#waitForConnections        /**/ = opts.waitForConnections;
        this.#connectionLimit           /**/ = opts.connectionLimit;
        this.#queueLimit                /**/ = opts.queueLimit;

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Setup express
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        const app = express();
        app.use(cors());
        app.use(express.json());

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Setup handlers
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        app.post('/create',             /**/ async (req, res, next) => this.handleAuthAdmin(req, res, next));
        app.post('/create',             /**/ async (req, res, next) => this.handleRequestCreate(req, res, next));

        app.get('/get',                 /**/ async (req, res, next) => this.handleAuthAdminOrWorker(req, res, next));
        app.get('/get',                 /**/ async (req, res, next) => this.handleRequestGet(req, res, next));

        app.post('/cancel',             /**/ async (req, res, next) => this.handleAuthAdmin(req, res, next));
        app.post('/cancel',             /**/ async (req, res, next) => this.handleRequestCancel(req, res, next));

        app.get('/list',                /**/ async (req, res, next) => this.handleAuthAdmin(req, res, next));
        app.get('/list',                /**/ async (req, res, next) => this.handleRequestList(req, res, next));

        app.get('/worker/pending',      /**/ async (req, res, next) => this.handleAuthAdminOrWorker(req, res, next));
        app.get('/worker/pending',      /**/ async (req, res, next) => this.handleRequestWorkerPending(req, res, next));

        app.post('/worker/feedback',    /**/ async (req, res, next) => this.handleAuthAdminOrWorker(req, res, next));
        app.post('/worker/feedback',    /**/ async (req, res, next) => this.handleRequestWorkerFeedback(req, res, next));

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Setup database
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        this.#dbPool = mysql.createPool({
            host:                       /**/ this.#host,
            user:                       /**/ this.#user,
            password:                   /**/ this.#password,
            database:                   /**/ this.#database,
            ...(
                this.#ssl ? {} : { ssl: { ca: fs.readFileSync("./extras/DigiCertGlobalRootCA.crt.pem") } }
            ),
            waitForConnections:         /**/ this.#waitForConnections,
            connectionLimit:            /**/ this.#connectionLimit,
            queueLimit:                 /**/ this.#queueLimit,
        });

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Server
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        app.listen(process.env.PORT || 3000, () => {
            console.log('Server is running');
        });
    }


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    dbCreate
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async dbCreate(subject: string, body: any): Promise<number> {
        let [result] = await this.#dbPool.execute(`
            insert into message(timeStart, status, subject, body)
            values(NOW(), ?, ?, ?)
        `, [
            DrumbeatMessageStatus.serialize(DrumbeatMessageStatus.Pending),
            subject,
            JSON.stringify(body),
        ]);
        return result.insertId;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    dbGet
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async dbGet(id: number): Promise<DrumbeatMessage | null> {
        let [rows]: [DrumbeatMessage[]] = await this.#dbPool.execute(`
            select      *
            from        message
            where       id=?
        `, [
            id
        ]);
        return rows[0] ?? null;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    dbGetPendingBySubject
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async dbGetPendingBySubject(subject: string): Promise<DrumbeatMessage | null> {
        let [rows]: [DrumbeatMessage[]] = await this.#dbPool.execute(`
            select      *
            from        message
            where       subject=?
        `, [
            subject,
        ]);
        return rows[0] ?? null;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    dbList
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async dbList(): Promise<DrumbeatMessage[]> {
        let [rows]: [DrumbeatMessage[]] = await this.#dbPool.execute(`
            select      *
            from        message
        `, [
        ]);
        return rows;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    dbDelete
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async dbDelete(id: number): Promise<void> {
        let [result]: [DrumbeatMessage[]] = await this.#dbPool.execute(`
            delete
            from        message
            where       id=?
        `, [
            id
        ]);
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    dbDelete
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async dbCancel(id: number): Promise<void> {
        let [result]: [DrumbeatMessage[]] = await this.#dbPool.execute(`
            update      message
            set         status=?
            where       id=?
            and         status=?
        `, [
            DrumbeatMessageStatus.serialize(DrumbeatMessageStatus.Cancelled),
            id,
            DrumbeatMessageStatus.serialize(DrumbeatMessageStatus.Pending),
        ]);
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    paramId
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    paramId(req: Request): number | null {
        try {
            return parseInt(req.params.id);
        } catch (e) {
            return null;
        }
    }


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    paramId
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async messageFromParamId(req: Request, res: Response): Promise<DrumbeatMessage | null> {

        let id = this.paramId(req);
        if (id === null) {
            res.status(400);
            return null;
        }

        let message = await this.dbGet(id);
        if (message === null) {
            res.status(404);
            return null;
        }

        return message;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleAuthAdmin(req: Request, res: Response, next: NextFunction) {
        next();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleAuthAdminOrWorker(req: Request, res: Response, next: NextFunction) {
        next();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleRequestCreate(req: Request, res: Response, next: NextFunction) {

        const subject /**/ = req.body?.subject;
        const data    /**/ = req.body?.data;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        if (await this.dbGetPendingBySubject(subject) !== null) {
            res.status(400).json({ result: 'scheduled', message: 'An operation for this identity is already scheduled.' });
            return;
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Add
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        let id = await this.dbCreate(subject, data);

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Send response to client
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        res.status(200).json({ result: DrumbeatResponseStatus.Ok, data: id });
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleRequestGet(req: Request, res: Response, next: NextFunction) {

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Get message
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        const message = await this.messageFromParamId(req, res);
        if (message === null) return;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Send response to client
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        res.status(200).json({ result: DrumbeatResponseStatus.Ok, data: message });
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleRequestDelete(req: Request, res: Response, next: NextFunction) {

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // get id
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        let id = this.paramId(req);
        if (await this.messageFromParamId(req, res) === null) return;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        await this.dbDelete(id!);
        res.status(200);
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleRequestCancel(req: Request, res: Response, next: NextFunction) {

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // get id
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        let id = this.paramId(req);
        if (await this.messageFromParamId(req, res) === null) return;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        await this.dbCancel(id!);
        res.status(200);
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleRequestList(req: Request, res: Response, next: NextFunction) {
        next();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleRequestWorkerPending(req: Request, res: Response, next: NextFunction) {
        next();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Function:    
    //
    // Description: 
    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    async handleRequestWorkerFeedback(req: Request, res: Response, next: NextFunction) {
        next();
    }

}